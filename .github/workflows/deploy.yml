name: deploy

on:
  push:
    branches:
      - develop  # adapter si autre branche de déploiement

concurrency:
  group: deploy-production
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      REPO_URL: https://github.com/MakabonTech/custumization-odk-central.git
      DEPLOY_BRANCH: develop
      APP_DIR: /opt/central
      DOMAIN: ${{ secrets.DOMAIN }}
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Remote deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          port: 22
          timeout: 30s
          command_timeout: 10m
          envs: REPO_URL,DEPLOY_BRANCH,APP_DIR,DOMAIN
          script: |
            set -euo pipefail

            # sécurise les variables
            REPO_URL=${REPO_URL:-""}
            DEPLOY_BRANCH=${DEPLOY_BRANCH:-"develop"}
            APP_DIR=${APP_DIR:-"/opt/central"}
            DOMAIN=${DOMAIN:-""}

            echo "[deploy] Repo:$REPO_URL Branch:$DEPLOY_BRANCH Dir:$APP_DIR Domain:${DOMAIN:-unset}"
            if [ -z "${DOMAIN:-}" ]; then echo "[warn] DOMAIN secret unset (health check sera ignoré)"; fi

            # --- prerequisites (déjà installés sur le serveur) ---
            if ! command -v git >/dev/null 2>&1; then echo "[deploy] ERREUR: git non trouvé" >&2; exit 1; fi
            if command -v docker >/dev/null 2>&1; then echo "[deploy] docker OK $(docker --version 2>/dev/null || true)"; else echo "[deploy] ERREUR: docker non trouvé" >&2; exit 1; fi
            if docker compose version >/dev/null 2>&1; then COMPOSE_CMD="docker compose"; elif command -v docker-compose >/dev/null 2>&1; then COMPOSE_CMD="docker-compose"; else echo "[deploy] ERREUR: compose non trouvé" >&2; exit 1; fi
            echo "[deploy] compose cmd: $COMPOSE_CMD"

            # --- clone or update repo ---
            if [ ! -d "$APP_DIR/.git" ]; then
              echo "[deploy] initial clone"
              mkdir -p "$APP_DIR" 2>/dev/null || { echo "[deploy] ERREUR: impossible de créer $APP_DIR" >&2; exit 1; }
              git clone --depth=1 --branch "$DEPLOY_BRANCH" "$REPO_URL" "$APP_DIR"
            fi
            cd "$APP_DIR" || { echo "[deploy] ERREUR: cd $APP_DIR" >&2; exit 1; }
            git fetch origin "$DEPLOY_BRANCH" --depth=1
            git checkout "$DEPLOY_BRANCH"
            git reset --hard "origin/$DEPLOY_BRANCH"

            # --- environment injection ---
            touch .env
            if ! grep -q '^DOMAIN=' .env && [ -n "${DOMAIN:-}" ]; then echo "DOMAIN=$DOMAIN" >> .env; fi

            # --- docker deployment ---
            if [ ! -f docker-compose.yml ] && [ -f docker-compose.yaml ]; then ln -s docker-compose.yaml docker-compose.yml; fi
            if [ ! -f docker-compose.yml ]; then echo "[deploy] ERREUR: docker-compose.yml manquant" >&2; exit 1; fi
            echo "[deploy] Pull/build"
            $COMPOSE_CMD pull || true
            $COMPOSE_CMD build --pull
            echo "[deploy] Up"
            $COMPOSE_CMD up -d --remove-orphans
            docker image prune -f || true
            $COMPOSE_CMD ps

            # --- health check ---
            DOMAIN_VAL=$(grep '^DOMAIN=' .env | cut -d'=' -f2- || true)
            if [ -z "$DOMAIN_VAL" ]; then
              echo "[deploy] skip health (DOMAIN absent)"; exit 0
            fi
            BASE_URL="http://$DOMAIN_VAL"
            TARGET="$BASE_URL/version.txt"
            echo "[deploy] health check $TARGET"
            for i in $(seq 1 30); do
              if curl -fsS -m 5 "$TARGET" >/dev/null; then echo "[deploy] OK attempt $i"; exit 0; fi
              echo "[deploy] attempt $i ko -> wait"; sleep 5
            done
            echo "[deploy] FAIL health" >&2
            $COMPOSE_CMD logs --tail=150 || true
            exit 1

      - name: Summary
        run: echo "Deployed $GITHUB_SHA to $GITHUB_REF"

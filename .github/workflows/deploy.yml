name: deploy

on:
  push:
    branches:
      - develop   # adapter si autre branche de déploiement

concurrency:
  group: deploy-production
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Remote deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }} # facultatif si différent de 22
          script_stop: true
          script: |
            set -euo pipefail
            echo "[deploy] Repo:$REPO_URL Branch:$DEPLOY_BRANCH Dir:$APP_DIR Domain:${DOMAIN:-unset}";
            if [ -z "${DOMAIN:-}" ]; then echo "[warn] DOMAIN secret unset (health check sera ignoré)"; fi

            # --- prerequisites (git + docker) ---
            if ! command -v git >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y git; fi
            if ! docker compose version >/dev/null 2>&1; then
              if ! command -v curl >/dev/null 2>&1; then sudo apt-get install -y curl; fi
              curl -fsSL https://get.docker.com | sh
            fi
            sudo systemctl enable --now docker || true

            # --- clone or update repo ---
            if [ ! -d "$APP_DIR/.git" ]; then
              echo "[deploy] initial clone";
              sudo mkdir -p "$APP_DIR" && sudo chown $USER:$USER "$APP_DIR"
              git clone --depth=1 --branch "$DEPLOY_BRANCH" "$REPO_URL" "$APP_DIR"
            fi
            cd "$APP_DIR"
            git fetch origin "$DEPLOY_BRANCH" --depth=1
            git checkout "$DEPLOY_BRANCH"
            git reset --hard "origin/$DEPLOY_BRANCH"

            # --- environment injection ---
            touch .env
            if ! grep -q '^DOMAIN=' .env && [ -n "${DOMAIN:-}" ]; then echo "DOMAIN=$DOMAIN" >> .env; fi

            # --- docker deployment ---
            if [ ! -f docker-compose.yml ] && [ -f docker-compose.yaml ]; then ln -s docker-compose.yaml docker-compose.yml; fi
            if [ ! -f docker-compose.yml ]; then echo "[deploy] ERREUR: docker-compose.yml manquant" >&2; exit 1; fi
            echo "[deploy] Pull/build"
            docker compose pull || true
            docker compose build --pull
            echo "[deploy] Up"
            docker compose up -d --remove-orphans
            docker image prune -f || true
            docker compose ps

            # --- health check ---
            DOMAIN_VAL=$(grep '^DOMAIN=' .env | cut -d'=' -f2- || true)
            if [ -z "$DOMAIN_VAL" ]; then
              echo "[deploy] skip health (DOMAIN absent)"; exit 0;
            fi
            BASE_URL="http://$DOMAIN_VAL"
            TARGET="$BASE_URL/version.txt"
            echo "[deploy] health check $TARGET"
            for i in $(seq 1 30); do
              if curl -fsS -m 5 "$TARGET" >/dev/null; then echo "[deploy] OK attempt $i"; exit 0; fi
              echo "[deploy] attempt $i ko -> wait"; sleep 5;
            done
            echo "[deploy] FAIL health" >&2
            docker compose logs --tail=150 || true
            exit 1
        envs: |
          REPO_URL=https://github.com/MakabonTech/custumization-odk-central.git
          DEPLOY_BRANCH=develop
          APP_DIR=/opt/central
          DOMAIN=${{ secrets.DOMAIN }}

      - name: Summary
        run: echo "Deployed $GITHUB_SHA to $GITHUB_REF"
